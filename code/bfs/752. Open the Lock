import java.util.*

internal class Solution {
    fun openLock(deadends: Array<String?>, target: String): Int {

        val nextSlot = mapOf(
            '0' to '1',
            '1' to '2',
            '2' to '3',
            '3' to '4',
            '4' to '5',
            '5' to '6',
            '6' to '7',
            '7' to '8',
            '8' to '9',
            '9' to '0'
        )

        val prevSlot = mapOf(
            '0' to '9',
            '1' to '0',
            '2' to '1',
            '3' to '2',
            '4' to '3',
            '5' to '4',
            '6' to '5',
            '7' to '6',
            '8' to '7',
            '9' to '8'
        )

        val visitedCombinations: MutableSet<String> = mutableSetOf()
        deadends.forEach {
            it?.let { it1 -> visitedCombinations.add(it1) }
        }
        val pendingCombinations: Queue<String> = LinkedList()

        var turns = 0

        if (visitedCombinations.contains("0000")) {
            return -1
        }

        pendingCombinations.add("0000")
        visitedCombinations.add("0000")

        while (!pendingCombinations.isEmpty()) {
            val currLevelNodesCount = pendingCombinations.size
            for (i in 0 until currLevelNodesCount) {

                val currentCombination = pendingCombinations.poll()

                if (currentCombination == target) {
                    return turns
                }


                var wheel = 0
                while (wheel < 4) {

                    var newCombination = StringBuilder(currentCombination)
                    newCombination.setCharAt(wheel, nextSlot[newCombination[wheel]]!!)

                    if (!visitedCombinations.contains(newCombination.toString())) {
                        pendingCombinations.add(newCombination.toString())
                        visitedCombinations.add(newCombination.toString())
                    }


                    newCombination = StringBuilder(currentCombination)
                    newCombination.setCharAt(wheel, prevSlot[newCombination[wheel]]!!)

                    if (!visitedCombinations.contains(newCombination.toString())) {
                        pendingCombinations.add(newCombination.toString())
                        visitedCombinations.add(newCombination.toString())
                    }
                    wheel += 1
                }
            }

            turns += 1
        }
        return -1
    }
}


